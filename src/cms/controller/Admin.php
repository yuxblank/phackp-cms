<?phpnamespace cms\controller;use model\Banner;use model\Category;use model\Item;use model\User;use Psr\Http\Message\ServerRequestInterface;use SitemapPHP\Sitemap;use yuxblank\phackp\core\Application;use yuxblank\phackp\core\Crypto;use yuxblank\phackp\core\View;/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Admin * * @author yuri.blanc */class Admin extends Secured{    public function onBefore()    {        $this->controlHeader = new \stdClass();        if ($this->loadUser() === null) {            $this->keep("success", "Devi prima autenticarti");            $this->router->switchAction("admin/login");        }        $this->buildMenu();    }    public function onAfter()    {        // TODO: Implement onAfter() method.    }    private $controlHeader;    private $menu;    private $states = array(0 => "Non attivo", 1 => "Pubblicato");    public function buildMenu()    {        $this->menu = json_decode(file_get_contents(Application::$ROOT. '/config/menu.json'));        if ($this->menu == null) {            die('unable to load menu');        }        $this->view->renderArgs('userRole', $this->loadUser()->role);        $this->view->renderArgs('adminMenu', $this->menu);    }    public function index(ServerRequestInterface $request, User $user)    {        if (Secured::loadUser()->isCustomer()) {            $this->router->switchAction('clienti');        }        $this->view->renderArgs("item", new Item());        $this->view->renderArgs("category", new Category());        $this->view->renderArgs("user", new User());        $this->view->renderArgs("banner", new Banner());        $this->view->render("/admin/home");    }    public function content()    {        $this->noCustomers();        $item = new Item();        if (Secured::loadUser()->isSuperAdmin()) {            $this->view->renderArgs('items', $item->findAll());        } else if (Secured::loadUser()->isAdmin()) {            $this->view->renderArgs('items', $item->filteredArticles(Secured::loadUser()));        }        $this->controlHeader->new = $this->router->link('admin/content/new');        $this->controlHeader->delete = true;        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->render("/admin/content/index");    }    public function newContent()    {        $this->noCustomers();        $this->controlHeader->save = $this->router->link('admin/content/save');        $this->view->renderArgs('controlHeader', $this->controlHeader);        $categories = new Category();        $item = new Item();        $this->view->renderArgs("states", $item->getStates());        $this->view->renderArgs("categories", $categories->findAll());        $this->view->render("/admin/content/new");    }    public function editContent(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $item = new Item();        $id = filter_var($serverRequest->getQueryParams()['id'], FILTER_SANITIZE_NUMBER_INT);        $article = $item->findById($id);        if ($article) {            $this->view->renderArgs("item", $article);        } else {            $this->keep("warning", "Nessun elemento trovato");        }        $categories = new Category();        $this->view->renderArgs("categories", $categories->findAll());        $this->controlHeader->save = "#";        $this->view->renderArgs("states", $item->getStates());        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->render("/admin/content/new");    }    public function saveContent(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $user = Secured::loadUser();        // model instance        $item = new Item();        if ($serverRequest->getParsedBody()['id'] !== null && $serverRequest->getParsedBody()['id'] !== '') {            $item->id = filter_var($serverRequest->getParsedBody()['id'], FILTER_SANITIZE_NUMBER_INT);        }        $item->title = strip_tags(filter_var($serverRequest->getParsedBody()['title'], FILTER_SANITIZE_STRING));        $item->content = htmlspecialchars($serverRequest->getParsedBody()['content']);        $item->status = $serverRequest->getParsedBody()['state'];        $item->category_id = $serverRequest->getParsedBody()['category'];        $item->meta_desc = strip_tags($serverRequest->getParsedBody()['meta_description']);        $item->meta_tags = strip_tags($serverRequest->getParsedBody()['meta_tags']);        $item->meta_title = $item->title;        $item->user_id = $user->id;        $item->alias = $this->toAscii(filter_var($serverRequest->getParsedBody()['title'], FILTER_SANITIZE_STRING));        if ($item->id !== null && $item->id !== '' && ($item->title !== null && $item->content !== null && $item->status !== null && $item->category_id !== null)) {            $ItemLoad = new Item();            // check authorization            if ($user->isAuthorized($ItemLoad->findById($item->id)->user()->role)) {                $item->date_edit = date('Y-m-d H:i:s');                // do update                if ($item->update()) {                    $this->keep('success', "Salvataggio effettuato con successo");                    $this->router->switchAction('admin/content');                    //$this->router->switchAction('Admin@editContent', ['id' => $item->id]);                } else {                    $this->keep('danger', "Un errore ha impedito il salvataggio");                    $this->router->switchAction('admin/content');                }            } else {                $this->keep('danger', "Non hai permessi sufficenti per modificare questo elemento");                $this->router->switchAction('admin/content');            }            // do new save        } else if ($item->title != null && $item->content != null && $item->status != null && $item->category_id != null) {            $item->date_created = date('Y-m-d H:i:s');            if ($item->save()) {                $item->id = $item->lastInsertId();                //$this->router->switchAction('Admin@editContent', ['id' => $item->id]);                $this->keep('success', "Salvataggio effettuato con successo");                $this->router->switchAction('admin/content');            } else {                $this->keep('danger', "Un errore ha impedito il salvataggio");                $this->router->switchAction('admin/content');            }        } else {            die ('missing data');        }        $this->view->render("/admin/content/new");    }    public function deleteContent(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $User = Secured::loadUser();        $ids = $serverRequest->getQueryParams()['ids'];        $Item = new item();        $deleted = 0;        if ($ids !== null && count($ids) > 0) {            foreach ($ids as $id) {                $ItemFind = new Item();                $ItemFind = $ItemFind->findById($id);                if ($User->isAuthorized($ItemFind->user()->role)) {                    $Item->delete($id);                    $deleted++;                } else {                    echo "Non hai permessi sufficenti per cancellare questo elemento: " . $ItemFind->title . "<br>";                }            }        }        echo $deleted;    }    public function categories()    {        $this->noCustomers();        $this->onlySuperAdmin();        $Category = new Category();        $this->controlHeader->new = $this->router->link('admin/category/new');        $this->controlHeader->delete = true;        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->renderArgs('categories', $Category->findAll());        $this->view->render("/admin/content/categories");    }    public function newCategory()    {        $this->noCustomers();        $this->onlySuperAdmin();        $this->controlHeader->save = "#";        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->render("/admin/content/newCategory");    }    public function saveCategory(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $this->onlySuperAdmin();        $id = $serverRequest->getParsedBody()['id'];        $title = strip_tags($serverRequest->getParsedBody()['title']);        $description = strip_tags($serverRequest->getParsedBody()['description']);        $meta_desc = htmlspecialchars($serverRequest->getParsedBody()['meta_description']);        $meta_tags = strip_tags($serverRequest->getParsedBody()['meta_tags']);        $Category = new Category();        $Category->id = $id;        $Category->description = $description;        $Category->title = $title;        $Category->meta_description = $meta_desc;        $Category->meta_tags = $meta_tags;        $Category->alias = $this->toAscii(filter_var($serverRequest->getParsedBody()['title'], FILTER_SANITIZE_STRING));        if ($Category->id !== null && $Category->id !== '' && $Category->title !== '') {            if ($Category->update()) {                $this->keep('success', "Aggiornamento effettuato con successo");                $this->router->switchAction('admin/categories');            } else {                $this->keep('danger', "Un errore ha impedito il salvataggio");                $this->router->switchAction('admin/category/edit/' . $id);            }        } else if (isset($id) && $id == '' && $title != '') {            $Category->id = null;            if ($Category->save()) {                $this->keep('success', "Salvataggio effettuato con successo");                $this->router->switchAction('admin/categories');            } else {                $this->keep('danger', "Un errore ha impedito il salvataggio");                $this->router->switchAction('admin/category/edit/' . $id);            }        } else {            $this->keep('danger', "Dati mancanti completare e riprovare");            $this->router->switchAction('admin/category/edit/' . $id);        }    }    public function editCategory(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $this->onlySuperAdmin();        $id = filter_var($serverRequest->getQueryParams()['id'], FILTER_SANITIZE_NUMBER_INT);        $Category = new Category();        $cat = $Category->findById($id);        if ($Category) {            $this->view->renderArgs("category", $cat);        } else {            $this->keep("warning", "Nessun elemento trovato");        }        $this->controlHeader->save = "#";        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->render("/admin/content/newCategory");    }    public function deleteCategory(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $this->onlySuperAdmin();        $ids = $serverRequest->getQueryParams()['ids'];        $deleted = 0;        if ($ids !== null && count($ids) > 0) {            $Category = new Category();            foreach ($ids as $id) {                $Category->delete($id);                $deleted++;            }        }        echo $deleted;    }    public function user()    {        $this->noCustomers();        $user = new User();        if (Secured::loadUser()->isSuperAdmin()) {            $this->view->renderArgs('users', $user->findAll());        } else {            $this->view->renderArgs('users', $user->findAll('role < ?', array(3)));        }        $this->controlHeader->new = $this->router->link('admin/user/new');        $this->controlHeader->delete = true;        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->render("/admin/user/index");    }    public function newUser()    {        $this->noCustomers();        $User = new User();        $this->controlHeader->save = "#";        $this->view->renderArgs("states", $User->getStates());        $this->view->renderArgs('user', $User);        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->render("/admin/user/new");    }    public function editUser(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $id = filter_var($serverRequest->getQueryParams()['id'], FILTER_SANITIZE_NUMBER_INT);        // todo block edit of sa        $User = new User();        $this->controlHeader->save = "#";        $this->view->renderArgs("states", $User->getStates());        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->renderArgs('user', $User->findById($id));        $this->view->render("/admin/user/new");    }    public function saveUser(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $User = new User();        if ($serverRequest->getParsedBody()['id'] !== null && $serverRequest->getParsedBody()['id'] !== '') {            $User->id = filter_var($serverRequest->getParsedBody()['id'], FILTER_SANITIZE_NUMBER_INT);        }        $User->email = filter_var($serverRequest->getParsedBody()['email'], FILTER_SANITIZE_EMAIL);        $User->role = $serverRequest->getParsedBody()['role'];        $Crypto = new Crypto();        if (isset($serverRequest->getParsedBody()['password']) && $serverRequest->getParsedBody()['password'] != "") {            $User->password = $Crypto->generateHash($serverRequest->getParsedBody()['password']);        }        $User->status = $serverRequest->getParsedBody()['status'];        if (!empty($User->email)) {            if ($User->id != null) {                // TODO ACL                if ($User->role == 3 && !Secured::loadUser()->isSuperAdmin()) {                    die("You are not authorized to promote superusers");                }                if ($User->update()) {                    $this->keep('success', "Aggiornamento effettuato con successo");                } else {                    $this->keep('success', "Un errore ha impedito il salvataggio");                }            } else {                $User->date_created = date('Y-m-d H:i:s');                // TODO ACL                if ($User->role == 3 && !Secured::loadUser()->isSuperAdmin()) {                    die("You are not authorized to create superusers");                }                if ($User->alreadyExist()) {                    die("This email already belongs to another user");                }                if ($User->save()) {                    $this->keep('success', "Salvataggio effettuato con successo");                } else {                    $this->keep('success', "Un errore ha impedito il salvataggio");                }            }        } else {            $this->keep('danger', "Dati mancanti completare e riprovare");        }        $this->router->switchAction('admin/user');    }    public function deleteUser($params)    {        $this->noCustomers();        $ids = $params['ids'];        $deleted = 0;        if ($ids !== null && count($ids) > 0) {            $User = new User();            foreach ($ids as $id) {                $User->delete($id);                $deleted++;            }        }        echo $deleted;    }    public function banner()    {        $this->noCustomers();        $banner = new Banner();        $this->controlHeader->new = $this->router->link('admin/banner/new');        $this->controlHeader->delete = true;        $this->view->renderArgs('controlHeader', $this->controlHeader);        $this->view->renderArgs('banners', $banner->findAll());        $this->view->render("/admin/banner/index");    }    public function newBanner()    {        $this->noCustomers();        $this->controlHeader->save = "#";        $this->view->renderArgs('controlHeader', $this->controlHeader);        $User = new User();        $this->view->renderArgs("states", $this->states);        $this->view->renderArgs("users", $User->findAll("WHERE role=?", 1));        $this->view->render("/admin/banner/edit");    }    public function editBanner(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $banner = new Banner();        $id = filter_var($serverRequest->getQueryParams()['id'], FILTER_SANITIZE_NUMBER_INT);        $this->view->renderArgs("banner", $banner->findById($id));        $this->controlHeader->save = "#";        $this->view->renderArgs('controlHeader', $this->controlHeader);        $User = new User();        $this->view->renderArgs("states", $this->states);        $this->view->renderArgs("users", $User->findAll("where role=?", 1));        $this->view->render("/admin/banner/edit");    }    public function saveBanner(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $image = $_FILES['image'];        $Banner = new Banner();        if ($serverRequest->getParsedBody()['id'] !== null && $serverRequest->getParsedBody()['id'] !== '') {            $Banner->id = $serverRequest->getParsedBody()['id'];        }        $Banner->title = strip_tags($serverRequest->getParsedBody()['title']);        if ($image['size'] !== 0) {            $Banner->image = $image['name'];        }        $Banner->code = $serverRequest->getParsedBody()['code'];        $Banner->url = filter_var($serverRequest->getParsedBody()['url'], FILTER_SANITIZE_URL);        $Banner->type = $serverRequest->getParsedBody()['type'];        $Banner->user_id = $serverRequest->getParsedBody()['user'];        $Banner->status = $serverRequest->getParsedBody()['status'];        if ($Banner->title != '' && $Banner->type != "" && $image != null) {            if (isset($Banner->id) && $Banner->id != '') {                $local = "public/images/banners/" . $Banner->image;                if (file_exists($local) && $image['size'] != 0) {                    unlink("public/images/banners/" . $Banner->image);                    $this->uploadImages($image, "public/images/banners/");                }                if ($Banner->update()) {                    $this->keep('success', "Aggiornamento effettuato con successo");                } else {                    $this->keep('success', "Un errore ha impedito il salvataggio");                }            } else {                $uploadResult = $this->uploadImages($image, "public/images/banners/");                if ($uploadResult === "OK") {                    if ($Banner->save()) {                        $this->keep('success', "Salvataggio effettuato con successo");                    } else {                        unlink("public/images/banners/" . $image['name']);                        $this->keep('success', "Un errore ha impedito il salvataggio");                    }                } else {                    $this->keep('success', $uploadResult);                }            }        } else {            $this->keep('success', "Dati mancanti completare e riprovare");        }        $this->router->switchAction('admin/banner');    }    public function deleteBanner(ServerRequestInterface $serverRequest)    {        $this->noCustomers();        $Banner = new Banner();        $ids = $serverRequest->getParsedBody()['ids'];        $deleted = 0;        if ($ids !== null && is_array($ids) && count($ids) > 0) {            foreach ($ids as $id) {                $image = $Banner->findById($id)->image;                unlink(Application::$ROOT . "/public/images/banners/$image");                $Banner->delete($id);                $deleted++;            }        }        echo $deleted;    }    public function uploadBanner()    {        $this->noCustomers();        $image = ($_FILES['banner']);        switch ($image['error']) {            case UPLOAD_ERR_INI_SIZE:                echo "Il file supera la dimensione massima accettaa dal server";                break;            case UPLOAD_ERR_NO_FILE:                echo "Nessun file inviato";                break;            case UPLOAD_ERR_OK:                //allowed file type Server side check                switch ($image['type']) {                    //allowed file types                    case 'image/png':                    case 'image/gif':                    case 'image/jpeg':                    case 'image/pjpeg':                        break;                    default:                        die('Unsupported File!'); //output error                }                $upload = Application::$ROOT . "public/images/banners/" . $image['name'];                if (file_exists($upload)) {                    die("Un file con questo nome e gia presente sul server, cancellalo o rinomina il file da caricare");                }                if (move_uploaded_file($image['tmp_name'], $upload)) {                    // do other stuff                    die("Caricamento effettuato con successo");                } else {                    die("Caricamento fallito");                }        }    }    public function config()    {        $this->noCustomers();        $this->view->render("/admin/appconfig");    }    private function uploadImages($file, $folder)    {        $result = "";        switch ($file['error']) {            case UPLOAD_ERR_INI_SIZE:                $result = "Il file supera la dimensione massima accettata dal server";                break;            case UPLOAD_ERR_NO_FILE:                $result = "Nessun file inviato";                break;            case UPLOAD_ERR_OK:                //allowed file type Server side check                switch ($file['type']) {                    //allowed file types                    case 'image/png':                    case 'image/gif':                    case 'image/jpeg':                    case 'image/pjpeg':                        break;                    default:                        $result = 'Unsupported File!';                }                $upload = Application::$ROOT . '/' . $folder . $file['name'];                if (!file_exists($upload)) {                    if (move_uploaded_file($file['tmp_name'], $upload)) {                        $result = "OK";                    } else {                        $result = "Caricamento fallito";                    }                } else {                    $result = "Un file con questo nome e gia presente sul server, cancellalo o rinomina il file da caricare";                }        }        return $result;    }    public function generateSitmap()    {        $this->noCustomers();        if (file_exists(Application::$ROOT . '/sitemap.xml')) {            unlink(Application::$ROOT . '/sitemap.xml');        }        if (file_exists(Application::$ROOT . '/sitemap-index.xml')) {            unlink(Application::$ROOT . '/sitemap-index.xml');        }        $Sitemap = new Sitemap("");        $Sitemap->setPath(Application::$ROOT . '/');        $Sitemap->addItem(rtrim($this->router->link('/'), '/'), 1.0, 'monthly');        $Sitemap->addItem($this->router->link('novita'), 1.0, 'monthly');        $Sitemap->addItem($this->router->link('pizze'), 1.0, 'monthly');        $Sitemap->addItem($this->router->link('dove_trovarci'), 1.0, 'monthly');        $Sitemap->addItem($this->router->link('chi_siamo'), 1.0, 'monthly');        $Category = new Category();        $Categories = $Category->find("title LIKE ?", array("Novit%"));        foreach ($Categories->item() as $item) {            if ($item->status == 1) {                $Sitemap->addItem($this->router->link('novita/{title}/{id}', [$item->alias, $item->id]), 1.0, 'daily');            }        }        $Informations = $Category->find("title LIKE ?", array("Informazioni%"));        foreach ($Informations->item() as $info) {            if ($info->status == 1) {                $Sitemap->addItem($this->router->link('informazioni/{title}/                {id}', [$info->alias, $info->id]), 1.0, 'monthly');            }        }        $Sitemap->createSitemapIndex(Application::getAppUrl() . "/", 'Today');        echo "Generazione completata con successo";    }    public function onlySuperAdmin()    {        if (!Secured::loadUser()->isSuperAdmin()) {            die("unathorized access");        }    }    public function noCustomers()    {        if (Secured::loadUser()->isCustomer()) {            die("unathorized access");        }    }    public function customers()    {        $view = new View();        $banner = new Banner();        $view->renderArgs("banners", $banner->findAll("user_id=?", [Secured::loadUser()->id]));        $view->render("admin/customer");    }    /*  private function toAscii($str)      {          $space = str_replace(' ','-',$str);  ù          if(substr($space,strlen($space)-1,1) === "-"){              $space = rtrim($space,'-');          }          return rawurlencode(strtolower($space));      } */    private function toAscii($str, $replace = array("'"), $delimiter = '-')    {        if (!empty($replace)) {            $str = str_replace((array)$replace, ' ', $str);        }        $clean = iconv('UTF-8', 'ASCII//TRANSLIT', $str);        $clean = preg_replace("/[^a-zA-Z0-9\\/_|+ -]/", '', $clean);        $ts = array("/[À-Å]/", "/Æ/", "/Ç/", "/[È-Ë]/", "/[Ì-Ï]/", "/Ð/", "/Ñ/", "/[Ò-ÖØ]/", "/×/", "/[Ù-Ü]/", "/[Ý-ß]/", "/[à-å]/", "/æ/", "/ç/", "/[è-ë]/", "/[ì-ï]/", "/ð/", "/ñ/", "/[ò-öø]/", "/÷/", "/[ù-ü]/", "/[ý-ÿ]/");        $tn = array("A", "AE", "C", "E", "I", "D", "N", "O", "X", "U", "Y", "a", "ae", "c", "e", "i", "d", "n", "o", "x", "u", "y");        $clean = preg_replace($ts, $tn, $clean);        $clean = strtolower(trim($clean, '-'));        $clean = preg_replace("/[\\/_|+ -]+/", $delimiter, $clean);        if (substr($clean, strlen($clean) - 1, 1) === "-") {            $clean = rtrim($clean, '-');        }        return $clean;    }}