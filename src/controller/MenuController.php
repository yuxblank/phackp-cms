<?php
/**
 * Created by IntelliJ IDEA.
 * User: yux
 * Date: 30/12/17
 * Time: 12.56
 */

namespace cms\controller;


use cms\doctrine\model\Menu;
use cms\doctrine\model\MenuItem;
use cms\doctrine\repository\MenuRepository;
use cms\doctrine\repository\UserRepository;
use cms\library\crud\EntityLinker;
use cms\library\crud\Response;
use cms\model\MenuFactory;
use Doctrine\DBAL\Exception\InvalidArgumentException;
use Doctrine\ORM\OptimisticLockException;
use League\OAuth2\Server\ResourceServer;
use yuxblank\phackp\http\api\ServerRequestInterface;
use yuxblank\phackp\routing\api\Router;
use yuxblank\phackp\routing\exception\RouterException;

class MenuController extends Admin
{

    protected $menuRepository;
    protected $entityLinker;

    /**
     * MenuController constructor.
     * @param Router $router
     * @param UserRepository $userRepository
     * @param ResourceServer $resourceServer
     * @param ServerRequestInterface $serverRequest
     * @param MenuRepository $menuRepository
     * @param EntityLinker $entityLinker
     */
    public function __construct(Router $router, UserRepository $userRepository, ResourceServer $resourceServer, ServerRequestInterface $serverRequest, MenuRepository $menuRepository, EntityLinker $entityLinker)
    {
        parent::__construct($router,$userRepository,$resourceServer,$serverRequest);
        $this->menuRepository = $menuRepository;
        $this->entityLinker = $entityLinker;
    }

    public function create(ServerRequestInterface $serverRequest)
    {
        try {
            $requestObject = $serverRequest->getParsedBody();
            $menu = new Menu();
            MenuFactory::updateMenu($menu, $this->serverRequest->getParsedBody());
            $this->menuRepository->save($menu);
            return Response::ok($menu)->build();
        } catch (OptimisticLockException $e) {

        } catch (InvalidArgumentException $e) {

        }


    }

    public function read(ServerRequestInterface $serverRequest)
    {
        if ($serverRequest->getPathParams() !== null) {
            /** @var Menu $menu */
            $menu = $this->menuRepository->find((int)$serverRequest->getPathParams()['id']);
            try {
                /** @var MenuItem $item */
                foreach ($menu->getItems() as $item){
                    $this->entityLinker->make($item);
                }
            } catch (RouterException $e) {
                return Response::error(504, ['error' => 'Cannot build link for entity'])->build();
            }
            return Response::ok($menu)->build();
        }
        $menu = $this->menuRepository->findAll();
        return Response::ok($menu)->build();
    }

    public function update(ServerRequestInterface $serverRequest)
    {
        try {
            $requestObject = $serverRequest->getParsedBody();
            $menu = $this->menuRepository->find((int)$serverRequest->getParsedBody()['id']);
            MenuFactory::updateMenu($menu, $this->serverRequest->getParsedBody());
            

            $menu = $this->menuRepository->update($menu);
            return Response::ok($menu)->build();
        } catch (OptimisticLockException $e) {

        } catch (InvalidArgumentException $e) {

        }
    }

    public function delete(ServerRequestInterface $serverRequest)
    {
        parent::delete($serverRequest); // TODO: Change the autogenerated stub
    }


}